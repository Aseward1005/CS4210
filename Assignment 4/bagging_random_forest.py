#-------------------------------------------------------------------------
# AUTHOR: Anthony Seward
# FILENAME: bagging_random_forest.py
# SPECIFICATION: tests the speed and accuracy of ensemble classifier using bagging vs random forest vs single classifier
# FOR: CS 4210- Assignment #4
# TIME SPENT: 1 hour
#-----------------------------------------------------------*/

#IMPORTANT NOTE: DO NOT USE ANY ADVANCED PYTHON LIBRARY TO COMPLETE THIS CODE SUCH AS numpy OR pandas. You have to work here only with standard vectors and arrays

#importing some Python libraries
from sklearn import tree
from sklearn.utils import resample
from sklearn.ensemble import RandomForestClassifier

import csv

dbTraining = []
dbTest = []
X_training = []
y_training = []
classVotes = [] #this array will be used to count the votes of each classifier

training_file = 'optdigits.tes'
test_file = 'optdigits.tra'
#reading the training data from a csv file and populate dbTraining
#--> add your Python code here
with open(training_file) as train:
   reader = csv.reader(train)
   for i, row in enumerate(reader):
      if i > 0: #skipping the header
         dbTraining.append(row)

#reading the test data from a csv file and populate dbTest
#--> add your Python code here
with open(test_file) as test:
   reader = csv.reader(test)
   for i, row in enumerate(reader):
      if i > 0: #skipping the header
         dbTest.append(row)

#inititalizing the class votes for each test sample. Example: classVotes.append([0,0,0,0,0,0,0,0,0,0])
#--> add your Python code here
for i in range(len(dbTest)):
   classVotes.append([0 for i in range(10)])

print("Started my base and ensemble classifier ...")

correct = 0
for k in range(20): #we will create 20 bootstrap samples here (k = 20). One classifier will be created for each bootstrap sample

   bootstrapSample = resample(dbTraining, n_samples=len(dbTraining), replace=True)

  #populate the values of X_training and y_training by using the bootstrapSample
  #--> add your Python code here
   for i, row in enumerate(bootstrapSample):
      X_training.append([row[j] for j in range(len(row)-1)])
      y_training.append(row[len(row)-1])

  #fitting the decision tree to the data
   clf = tree.DecisionTreeClassifier(criterion = 'entropy', max_depth=None) #we will use a single decision tree without pruning it
   clf = clf.fit(X_training, y_training)

   for i, testSample in enumerate(dbTest):

      #make the classifier prediction for each test sample and update the corresponding index value in classVotes. For instance,
      # if your first base classifier predicted 2 for the first test sample, then classVotes[0,0,0,0,0,0,0,0,0,0] will change to classVotes[0,0,1,0,0,0,0,0,0,0].
      # Later, if your second base classifier predicted 3 for the first test sample, then classVotes[0,0,1,0,0,0,0,0,0,0] will change to classVotes[0,0,1,1,0,0,0,0,0,0]
      # Later, if your third base classifier predicted 3 for the first test sample, then classVotes[0,0,1,1,0,0,0,0,0,0] will change to classVotes[0,0,1,2,0,0,0,0,0,0]
      # this array will consolidate the votes of all classifier for all test samples
      #--> add your Python code her
      sample = [testSample[j] for j in range(len(testSample)-1)]
      prediction = clf.predict([sample])[0]
      classVotes[i][int(prediction)] += 1
      if k == 0: #for only the first base classifier, compare the prediction with the true label of the test sample here to start calculating its accuracy
         #--> add your Python code here
         label = testSample[len(testSample) - 1]
         if label == prediction:
            correct += 1
         

   if k == 0: #for only the first base classifier, print its accuracy here
     #--> add your Python code here
     accuracy = correct / len(dbTest)
     print("Finished my base classifier (fast but relatively low accuracy) ...")
     print("My base classifier accuracy: " + str(accuracy))
     print("")

  #now, compare the final ensemble prediction (majority vote in classVotes) for each test sample with the ground truth label to calculate the accuracy of the ensemble classifier (all base classifiers together)
  #--> add your Python code here

#printing the ensemble accuracy here
correct = 0
for i, row in enumerate(dbTest):
   #we need to do argmax
   prediction = max(zip(classVotes[i], range(len(classVotes[i]))))[1] #use the zip function for it
   if int(row[len(row)-1]) == int(prediction):
      correct += 1

accuracy = correct / len(dbTest)
print("Finished my ensemble classifier (slow but higher accuracy) ...")
print("My ensemble accuracy: " + str(accuracy))
print("")

print("Started Random Forest algorithm ...")

#Create a Random Forest Classifier
clf=RandomForestClassifier(n_estimators=20) #this is the number of decision trees that will be generated by Random Forest. The sample of the ensemble method used before

#Fit Random Forest to the training data
clf.fit(X_training,y_training)

#make the Random Forest prediction for each test sample. Example: class_predicted_rf = clf.predict([[3, 1, 2, 1, ...]]
#--> add your Python code here
predictions = clf.predict([row[0:len(row)-1] for row in dbTest])

#compare the Random Forest prediction for each test sample with the ground truth label to calculate its accuracy
#--> add your Python code here
labels = [row[len(row)-1] for row in dbTest]
correct = sum([predictions[i] == labels[i] for i in range(len(predictions))])

#printing Random Forest accuracy here
accuracy = correct / len(dbTest)
print("Random Forest accuracy: " + str(accuracy))

print("Finished Random Forest algorithm (much faster and higher accuracy!) ...")
